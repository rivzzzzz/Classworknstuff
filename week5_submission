{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":204729139,"sourceType":"kernelVersion"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"This is the second notebook, see feature_engineering here: [pretrained Roberta-base sentiment analysis](https://www.kaggle.com/code/rivuletnriver/resaurant-rating)\n\nI pretty much did exactly the same here as what I did for Loan Approval competition (fixed data leakage during hyperparameter tuning):  [Loan Approval errored Notebook](https://www.kaggle.com/code/rivuletnriver/loan-approval-catboost-optuna#Loading)","metadata":{}},{"cell_type":"markdown","source":"## Imports","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nimport sys\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport gc\n\nfrom sklearn.model_selection import KFold, StratifiedKFold, GridSearchCV, train_test_split\nfrom catboost import CatBoostRegressor, Pool\nfrom catboost.utils import eval_metric\n\nimport sklearn.metrics\nfrom sklearn.metrics import roc_auc_score, accuracy_score, roc_curve\n\nimport optuna\nfrom optuna.samplers import TPESampler\nimport ast\n\nprint('import successful')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Loading & Preprocessing","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/resaurant-rating/processed_df.csv')\n\ndf = df.drop_duplicates('reviews_list').reset_index()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:02.930886Z","iopub.execute_input":"2024-11-02T22:40:02.931438Z","iopub.status.idle":"2024-11-02T22:40:21.414075Z","shell.execute_reply.started":"2024-11-02T22:40:02.931390Z","shell.execute_reply":"2024-11-02T22:40:21.413230Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:21.415178Z","iopub.execute_input":"2024-11-02T22:40:21.415496Z","iopub.status.idle":"2024-11-02T22:40:21.522773Z","shell.execute_reply.started":"2024-11-02T22:40:21.415451Z","shell.execute_reply":"2024-11-02T22:40:21.521884Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['menu_item'] = df['menu_item'].apply(lambda x: ast.literal_eval(x)).apply(lambda x : ', '.join(x))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:21.525292Z","iopub.execute_input":"2024-11-02T22:40:21.525744Z","iopub.status.idle":"2024-11-02T22:40:25.594304Z","shell.execute_reply.started":"2024-11-02T22:40:21.525700Z","shell.execute_reply":"2024-11-02T22:40:25.593505Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Map values in review sentiment score column to neagitive, neutral and positive score\ntemp = df['review_sentiment_score'].apply(lambda x: [float(x) for x in x.strip('[]').split()])\ndf['negative_score'] = temp.apply(lambda x : x[0])\ndf['neutral_score'] = temp.apply(lambda x : x[1])\ndf['positive_score'] = temp.apply(lambda x : x[2])\n\n# change data type\ndf = df.drop('review_sentiment_score', axis = 1)\ndf = df.rename({'reviews_list' : 'reviews'}, axis = 1)\ndf['votes'] = df['votes'].astype(int)\ndf['approx_cost(for two people)'] = df['approx_cost(for two people)'].str.replace(',', '').astype(int)\ndf['negative_score'] = df['negative_score'].astype('float32')\ndf['neutral_score'] = df['neutral_score'].astype('float32')\ndf['positive_score'] = df['positive_score'].astype('float32')\ndf['rate'] = df['rate'].astype('float32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:25.595533Z","iopub.execute_input":"2024-11-02T22:40:25.596187Z","iopub.status.idle":"2024-11-02T22:40:25.876190Z","shell.execute_reply.started":"2024-11-02T22:40:25.596140Z","shell.execute_reply":"2024-11-02T22:40:25.875361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:25.918904Z","iopub.execute_input":"2024-11-02T22:40:25.919249Z","iopub.status.idle":"2024-11-02T22:40:26.012509Z","shell.execute_reply.started":"2024-11-02T22:40:25.919203Z","shell.execute_reply":"2024-11-02T22:40:26.011281Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.hist(df['rate'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.013433Z","iopub.execute_input":"2024-11-02T22:40:26.013733Z","iopub.status.idle":"2024-11-02T22:40:26.306746Z","shell.execute_reply.started":"2024-11-02T22:40:26.013702Z","shell.execute_reply":"2024-11-02T22:40:26.305907Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Hyperparameter Tuning ","metadata":{}},{"cell_type":"code","source":"cat_feature_cols = ['name', 'online_order', 'book_table', 'location', 'rest_type', 'dish_liked', 'cuisines', 'listed_in(type)', 'menu_item', 'listed_in(city)']\nnum_feature_cols = ['votes', 'approx_cost(for two people)', 'negative_score', 'neutral_score', 'positive_score']\nselected_cols = cat_feature_cols + num_feature_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:42:16.032938Z","iopub.execute_input":"2024-11-02T22:42:16.033677Z","iopub.status.idle":"2024-11-02T22:42:16.038573Z","shell.execute_reply.started":"2024-11-02T22:42:16.033637Z","shell.execute_reply":"2024-11-02T22:42:16.037592Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = df.drop('rate', axis = 1)\ny = df['rate']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.315690Z","iopub.execute_input":"2024-11-02T22:40:26.316313Z","iopub.status.idle":"2024-11-02T22:40:26.323498Z","shell.execute_reply.started":"2024-11-02T22:40:26.316271Z","shell.execute_reply":"2024-11-02T22:40:26.322713Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 42)\nX_valid, X_test, y_valid, y_test = train_test_split(X_valid, y_valid, test_size=0.5, random_state=42)\n\nX_train = X_train[selected_cols]\nX_valid = X_valid[selected_cols]\nX_test = X_test[selected_cols]\n\ntrain_pool = Pool(X_train, y_train, cat_features = cat_feature_cols)\nvalid_pool = Pool(X_valid, y_valid, cat_features = cat_feature_cols)\ntest_pool = Pool(X_test, y_test, cat_features = cat_feature_cols)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.324763Z","iopub.execute_input":"2024-11-02T22:40:26.325075Z","iopub.status.idle":"2024-11-02T22:40:26.333533Z","shell.execute_reply.started":"2024-11-02T22:40:26.325044Z","shell.execute_reply":"2024-11-02T22:40:26.332671Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def calc_test_quality(train_pool, val_pool, test_pool, **kwargs):\n    model = CatBoostRegressor(**kwargs, random_seed=42, task_type='GPU', verbose = False, boosting_type = 'Plain')\n    model.fit(train_pool, verbose=0, eval_set=val_pool)\n    y_pred = model.predict(test_pool)\n    return eval_metric(test_pool.get_label(), y_pred, 'RMSE')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.334621Z","iopub.execute_input":"2024-11-02T22:40:26.334975Z","iopub.status.idle":"2024-11-02T22:40:26.345784Z","shell.execute_reply.started":"2024-11-02T22:40:26.334933Z","shell.execute_reply":"2024-11-02T22:40:26.344914Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def objective(trial):\n    params = {\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1),\n        'depth': trial.suggest_int('depth', 3, 10),\n        'iterations':trial.suggest_int('iterations', 1500, 2000),\n        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 1, 5),\n    }\n\n    model = CatBoostRegressor(**params, random_seed=42, task_type='GPU', verbose = False, boosting_type = 'Plain')\n    model.fit(train_pool, verbose=0, eval_set = valid_pool)\n    y_pred = model.predict(valid_pool)\n    \n    return eval_metric(valid_pool.get_label(), y_pred, 'RMSE')\n\nsampler = TPESampler(seed = 42)\nstudy = optuna.create_study(direction=\"minimize\", sampler=sampler)\nstudy.optimize(objective, n_trials=20)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.346716Z","iopub.execute_input":"2024-11-02T22:40:26.346966Z","iopub.status.idle":"2024-11-02T22:40:26.355315Z","shell.execute_reply.started":"2024-11-02T22:40:26.346938Z","shell.execute_reply":"2024-11-02T22:40:26.354508Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"study.best_params","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.356388Z","iopub.execute_input":"2024-11-02T22:40:26.356723Z","iopub.status.idle":"2024-11-02T22:40:26.365605Z","shell.execute_reply.started":"2024-11-02T22:40:26.356692Z","shell.execute_reply":"2024-11-02T22:40:26.364788Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"calc_test_quality(train_pool, valid_pool, test_pool, **study.best_params)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.366646Z","iopub.execute_input":"2024-11-02T22:40:26.366930Z","iopub.status.idle":"2024-11-02T22:40:26.374710Z","shell.execute_reply.started":"2024-11-02T22:40:26.366900Z","shell.execute_reply":"2024-11-02T22:40:26.373911Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"best_params = study.best_params","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:40:26.375843Z","iopub.execute_input":"2024-11-02T22:40:26.376212Z","iopub.status.idle":"2024-11-02T22:40:26.384665Z","shell.execute_reply.started":"2024-11-02T22:40:26.376171Z","shell.execute_reply":"2024-11-02T22:40:26.383930Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## CV","metadata":{}},{"cell_type":"code","source":"# # add test pool anytime, same procedure with train and val\n# folds = 5\n\n# kf = KFold(n_splits = folds, shuffle = True, random_state = 42)\n\n# best_val_loss = 10\n\n# for fold, (trn_idx, val_idx) in enumerate(kf.split(df)):\n#     # selection\n#     trn_ft = df.loc[trn_idx, selected_cols]\n#     trn_lbl = df.loc[trn_idx, 'rate']\n#     val_ft = df.loc[val_idx, selected_cols]\n#     val_lbl = df.loc[val_idx, 'rate']\n\n#     # create pool\n#     train_pool = Pool(trn_ft, trn_lbl, cat_features = cat_feature_cols)\n#     valid_pool = Pool(val_ft, val_lbl, cat_features = cat_feature_cols)\n\n#     # model\n#     model = CatBoostRegressor(\n#         **best_params,\n#         random_seed = 42, \n#         task_type = 'GPU', \n#         verbose = False,\n#         boosting_type = 'Plain'\n#     )\n\n#     model.fit(train_pool, eval_set = valid_pool)\n\n#     # compute loss\n#     pred_valid = model.predict(valid_pool)\n#     rmse = eval_metric(valid_pool.get_label(), pred_valid, 'RMSE')\n\n#     if rmse < best_val_loss:\n#         model.save_model(\"restaurant_model_v5.cbm\")\n    \n    \n#     print(f\"Fold {fold + 1}, RMSE: {rmse}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-02T22:43:51.649664Z","iopub.execute_input":"2024-11-02T22:43:51.650017Z","iopub.status.idle":"2024-11-02T22:45:16.031232Z","shell.execute_reply.started":"2024-11-02T22:43:51.649984Z","shell.execute_reply":"2024-11-02T22:45:16.029844Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Inference","metadata":{}},{"cell_type":"code","source":"X = df[selected_cols]\ny = df['rate']\n\nfull_train_pool = Pool(X, y, cat_features = cat_feature_cols)\n\nfinal_model = CatBoostRegressor(\n        **best_params,\n        random_seed = 42, \n        task_type = 'GPU', \n        verbose = False,\n        boosting_type = 'Plain'\n    )\n\nfinal_model.fit(full_train_pool)\n\nfinal_model.save_model(\"restaurant_model_v10.cbm\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# make prediction using final model here \n\n# final_model.predict(test) # or sth","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}