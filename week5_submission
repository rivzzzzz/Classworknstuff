{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f49b42bc",
   "metadata": {
    "papermill": {
     "duration": 0.007477,
     "end_time": "2024-11-03T04:28:20.662036",
     "exception": false,
     "start_time": "2024-11-03T04:28:20.654559",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is the second notebook, see feature_engineering here: https://www.kaggle.com/code/rivuletnriver/resaurant-rating\n",
    "\n",
    "I pretty did exactly the same here as what I did for Loan Approval competition (fixed data leakage during hyperparameter tuning): https://www.kaggle.com/code/rivuletnriver/loan-approval-catboost-optuna#Submission"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1010de0",
   "metadata": {
    "papermill": {
     "duration": 0.006413,
     "end_time": "2024-11-03T04:28:20.675247",
     "exception": false,
     "start_time": "2024-11-03T04:28:20.668834",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "70834e65",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:20.690015Z",
     "iopub.status.busy": "2024-11-03T04:28:20.689640Z",
     "iopub.status.idle": "2024-11-03T04:28:23.423735Z",
     "shell.execute_reply": "2024-11-03T04:28:23.422658Z"
    },
    "papermill": {
     "duration": 2.744029,
     "end_time": "2024-11-03T04:28:23.425915",
     "exception": false,
     "start_time": "2024-11-03T04:28:20.681886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "import successful\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import sys\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import gc\n",
    "\n",
    "from sklearn.model_selection import KFold, StratifiedKFold, GridSearchCV, train_test_split\n",
    "from catboost import CatBoostRegressor, Pool\n",
    "from catboost.utils import eval_metric\n",
    "\n",
    "import sklearn.metrics\n",
    "from sklearn.metrics import roc_auc_score, accuracy_score, roc_curve\n",
    "\n",
    "import optuna\n",
    "from optuna.samplers import TPESampler\n",
    "import ast\n",
    "\n",
    "print('import successful')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2de9fadd",
   "metadata": {
    "papermill": {
     "duration": 0.006567,
     "end_time": "2024-11-03T04:28:23.440638",
     "exception": false,
     "start_time": "2024-11-03T04:28:23.434071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading & Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "57daf857",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:23.455446Z",
     "iopub.status.busy": "2024-11-03T04:28:23.454984Z",
     "iopub.status.idle": "2024-11-03T04:28:41.712523Z",
     "shell.execute_reply": "2024-11-03T04:28:41.711437Z"
    },
    "papermill": {
     "duration": 18.267886,
     "end_time": "2024-11-03T04:28:41.715170",
     "exception": false,
     "start_time": "2024-11-03T04:28:23.447284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/resaurant-rating/processed_df.csv')\n",
    "\n",
    "df = df.drop_duplicates('reviews_list').reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4bb8195e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:41.731596Z",
     "iopub.status.busy": "2024-11-03T04:28:41.731234Z",
     "iopub.status.idle": "2024-11-03T04:28:41.846641Z",
     "shell.execute_reply": "2024-11-03T04:28:41.845610Z"
    },
    "papermill": {
     "duration": 0.126189,
     "end_time": "2024-11-03T04:28:41.848912",
     "exception": false,
     "start_time": "2024-11-03T04:28:41.722723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 61308 entries, 0 to 61307\n",
      "Data columns (total 19 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   index                        61308 non-null  int64  \n",
      " 1   url                          61308 non-null  object \n",
      " 2   address                      61308 non-null  object \n",
      " 3   name                         61308 non-null  object \n",
      " 4   online_order                 61308 non-null  object \n",
      " 5   book_table                   61308 non-null  object \n",
      " 6   rate                         61308 non-null  float64\n",
      " 7   votes                        61308 non-null  int64  \n",
      " 8   phone                        61308 non-null  object \n",
      " 9   location                     61308 non-null  object \n",
      " 10  rest_type                    61308 non-null  object \n",
      " 11  dish_liked                   61308 non-null  object \n",
      " 12  cuisines                     61308 non-null  object \n",
      " 13  approx_cost(for two people)  61308 non-null  object \n",
      " 14  menu_item                    61308 non-null  object \n",
      " 15  listed_in(type)              61308 non-null  object \n",
      " 16  listed_in(city)              61308 non-null  object \n",
      " 17  reviews_list                 61308 non-null  object \n",
      " 18  review_sentiment_score       61308 non-null  object \n",
      "dtypes: float64(1), int64(2), object(16)\n",
      "memory usage: 8.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "85951b3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:41.864053Z",
     "iopub.status.busy": "2024-11-03T04:28:41.863743Z",
     "iopub.status.idle": "2024-11-03T04:28:45.983560Z",
     "shell.execute_reply": "2024-11-03T04:28:45.982728Z"
    },
    "papermill": {
     "duration": 4.129756,
     "end_time": "2024-11-03T04:28:45.985829",
     "exception": false,
     "start_time": "2024-11-03T04:28:41.856073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['menu_item'] = df['menu_item'].apply(lambda x: ast.literal_eval(x)).apply(lambda x : ', '.join(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "739dbb5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.001670Z",
     "iopub.status.busy": "2024-11-03T04:28:46.000927Z",
     "iopub.status.idle": "2024-11-03T04:28:46.290763Z",
     "shell.execute_reply": "2024-11-03T04:28:46.289993Z"
    },
    "papermill": {
     "duration": 0.300012,
     "end_time": "2024-11-03T04:28:46.293048",
     "exception": false,
     "start_time": "2024-11-03T04:28:45.993036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Map values in review sentiment score column to neagitive, neutral and positive score\n",
    "temp = df['review_sentiment_score'].apply(lambda x: [float(x) for x in x.strip('[]').split()])\n",
    "df['negative_score'] = temp.apply(lambda x : x[0])\n",
    "df['neutral_score'] = temp.apply(lambda x : x[1])\n",
    "df['positive_score'] = temp.apply(lambda x : x[2])\n",
    "df = df.drop('review_sentiment_score', axis = 1)\n",
    "df = df.rename({'reviews_list' : 'reviews'}, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbdcc1d3",
   "metadata": {
    "papermill": {
     "duration": 0.007588,
     "end_time": "2024-11-03T04:28:46.307748",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.300160",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## ok change the fking stirng to integers, bro who the fk made this garbage ass dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4eb3148c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.323078Z",
     "iopub.status.busy": "2024-11-03T04:28:46.322741Z",
     "iopub.status.idle": "2024-11-03T04:28:46.361684Z",
     "shell.execute_reply": "2024-11-03T04:28:46.360987Z"
    },
    "papermill": {
     "duration": 0.048717,
     "end_time": "2024-11-03T04:28:46.363575",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.314858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['votes'] = df['votes'].astype(int)\n",
    "df['approx_cost(for two people)'] = df['approx_cost(for two people)'].str.replace(',', '').astype(int)\n",
    "df['negative_score'] = df['negative_score'].astype('float32')\n",
    "df['neutral_score'] = df['neutral_score'].astype('float32')\n",
    "df['positive_score'] = df['positive_score'].astype('float32')\n",
    "df['rate'] = df['rate'].astype('float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c1d8a256",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.378702Z",
     "iopub.status.busy": "2024-11-03T04:28:46.378026Z",
     "iopub.status.idle": "2024-11-03T04:28:46.403382Z",
     "shell.execute_reply": "2024-11-03T04:28:46.402572Z"
    },
    "papermill": {
     "duration": 0.035274,
     "end_time": "2024-11-03T04:28:46.405660",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.370386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>url</th>\n",
       "      <th>address</th>\n",
       "      <th>name</th>\n",
       "      <th>online_order</th>\n",
       "      <th>book_table</th>\n",
       "      <th>rate</th>\n",
       "      <th>votes</th>\n",
       "      <th>phone</th>\n",
       "      <th>location</th>\n",
       "      <th>...</th>\n",
       "      <th>dish_liked</th>\n",
       "      <th>cuisines</th>\n",
       "      <th>approx_cost(for two people)</th>\n",
       "      <th>menu_item</th>\n",
       "      <th>listed_in(type)</th>\n",
       "      <th>listed_in(city)</th>\n",
       "      <th>reviews</th>\n",
       "      <th>negative_score</th>\n",
       "      <th>neutral_score</th>\n",
       "      <th>positive_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>https://www.zomato.com/bangalore/kamat-hotel-s...</td>\n",
       "      <td>495/496, OPH Road, Shivajinagar, Bangalore</td>\n",
       "      <td>Kamat Hotel</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.6</td>\n",
       "      <td>60</td>\n",
       "      <td>080 25591913\\r\\r\\n+91 9741573008</td>\n",
       "      <td>Shivajinagar</td>\n",
       "      <td>...</td>\n",
       "      <td>Paper Masala Dosa, Coffee</td>\n",
       "      <td>North Indian, South Indian, Chinese</td>\n",
       "      <td>450</td>\n",
       "      <td></td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Frazer Town</td>\n",
       "      <td>Rated 3.0, RATED\\n  Good vegetarian place. But...</td>\n",
       "      <td>0.364979</td>\n",
       "      <td>0.373408</td>\n",
       "      <td>0.261613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>https://www.zomato.com/bangalore/kamat-hotel-s...</td>\n",
       "      <td>495/496, OPH Road, Shivajinagar, Bangalore</td>\n",
       "      <td>Kamat Hotel</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.6</td>\n",
       "      <td>60</td>\n",
       "      <td>080 25591913\\r\\r\\n+91 9741573008</td>\n",
       "      <td>Shivajinagar</td>\n",
       "      <td>...</td>\n",
       "      <td>Paper Masala Dosa, Coffee</td>\n",
       "      <td>North Indian, South Indian, Chinese</td>\n",
       "      <td>450</td>\n",
       "      <td></td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Frazer Town</td>\n",
       "      <td>Rated 4.0, RATED\\n  This restaurant has been a...</td>\n",
       "      <td>0.001147</td>\n",
       "      <td>0.012142</td>\n",
       "      <td>0.986711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>https://www.zomato.com/bangalore/kamat-hotel-s...</td>\n",
       "      <td>495/496, OPH Road, Shivajinagar, Bangalore</td>\n",
       "      <td>Kamat Hotel</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.6</td>\n",
       "      <td>60</td>\n",
       "      <td>080 25591913\\r\\r\\n+91 9741573008</td>\n",
       "      <td>Shivajinagar</td>\n",
       "      <td>...</td>\n",
       "      <td>Paper Masala Dosa, Coffee</td>\n",
       "      <td>North Indian, South Indian, Chinese</td>\n",
       "      <td>450</td>\n",
       "      <td></td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Frazer Town</td>\n",
       "      <td>Rated 3.0, RATED\\n  Yes it's legendary or shud...</td>\n",
       "      <td>0.049107</td>\n",
       "      <td>0.157217</td>\n",
       "      <td>0.793676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>https://www.zomato.com/bangalore/kamat-hotel-s...</td>\n",
       "      <td>495/496, OPH Road, Shivajinagar, Bangalore</td>\n",
       "      <td>Kamat Hotel</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3.6</td>\n",
       "      <td>60</td>\n",
       "      <td>080 25591913\\r\\r\\n+91 9741573008</td>\n",
       "      <td>Shivajinagar</td>\n",
       "      <td>...</td>\n",
       "      <td>Paper Masala Dosa, Coffee</td>\n",
       "      <td>North Indian, South Indian, Chinese</td>\n",
       "      <td>450</td>\n",
       "      <td></td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Frazer Town</td>\n",
       "      <td>Rated 3.0, RATED\\n  My partner apparently has ...</td>\n",
       "      <td>0.018264</td>\n",
       "      <td>0.137870</td>\n",
       "      <td>0.843866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>https://www.zomato.com/bangalore/imperial-rest...</td>\n",
       "      <td>42/5, Central Street, Shivajinagar Bus Stand, ...</td>\n",
       "      <td>Imperial Restaurant</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>2.9</td>\n",
       "      <td>238</td>\n",
       "      <td>080 22863638\\r\\r\\n00 22863639</td>\n",
       "      <td>Shivajinagar</td>\n",
       "      <td>...</td>\n",
       "      <td>Biryani, Shawarma, Ghee Rice, Chicken Grill, S...</td>\n",
       "      <td>North Indian, Chinese, Biryani, Kebab, Juices</td>\n",
       "      <td>800</td>\n",
       "      <td>Tandoori Chicken Kabab, Grilled Chicken, Chick...</td>\n",
       "      <td>Dine-out</td>\n",
       "      <td>Frazer Town</td>\n",
       "      <td>Rated 3.0, RATED\\n  The restaurant is located ...</td>\n",
       "      <td>0.006606</td>\n",
       "      <td>0.078972</td>\n",
       "      <td>0.914422</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index                                                url  \\\n",
       "0      0  https://www.zomato.com/bangalore/kamat-hotel-s...   \n",
       "1      1  https://www.zomato.com/bangalore/kamat-hotel-s...   \n",
       "2      2  https://www.zomato.com/bangalore/kamat-hotel-s...   \n",
       "3      3  https://www.zomato.com/bangalore/kamat-hotel-s...   \n",
       "4     12  https://www.zomato.com/bangalore/imperial-rest...   \n",
       "\n",
       "                                             address                 name  \\\n",
       "0         495/496, OPH Road, Shivajinagar, Bangalore          Kamat Hotel   \n",
       "1         495/496, OPH Road, Shivajinagar, Bangalore          Kamat Hotel   \n",
       "2         495/496, OPH Road, Shivajinagar, Bangalore          Kamat Hotel   \n",
       "3         495/496, OPH Road, Shivajinagar, Bangalore          Kamat Hotel   \n",
       "4  42/5, Central Street, Shivajinagar Bus Stand, ...  Imperial Restaurant   \n",
       "\n",
       "  online_order book_table  rate  votes                             phone  \\\n",
       "0           No         No   3.6     60  080 25591913\\r\\r\\n+91 9741573008   \n",
       "1           No         No   3.6     60  080 25591913\\r\\r\\n+91 9741573008   \n",
       "2           No         No   3.6     60  080 25591913\\r\\r\\n+91 9741573008   \n",
       "3           No         No   3.6     60  080 25591913\\r\\r\\n+91 9741573008   \n",
       "4          Yes         No   2.9    238     080 22863638\\r\\r\\n00 22863639   \n",
       "\n",
       "       location  ...                                         dish_liked  \\\n",
       "0  Shivajinagar  ...                          Paper Masala Dosa, Coffee   \n",
       "1  Shivajinagar  ...                          Paper Masala Dosa, Coffee   \n",
       "2  Shivajinagar  ...                          Paper Masala Dosa, Coffee   \n",
       "3  Shivajinagar  ...                          Paper Masala Dosa, Coffee   \n",
       "4  Shivajinagar  ...  Biryani, Shawarma, Ghee Rice, Chicken Grill, S...   \n",
       "\n",
       "                                        cuisines approx_cost(for two people)  \\\n",
       "0            North Indian, South Indian, Chinese                         450   \n",
       "1            North Indian, South Indian, Chinese                         450   \n",
       "2            North Indian, South Indian, Chinese                         450   \n",
       "3            North Indian, South Indian, Chinese                         450   \n",
       "4  North Indian, Chinese, Biryani, Kebab, Juices                         800   \n",
       "\n",
       "                                           menu_item listed_in(type)  \\\n",
       "0                                                           Dine-out   \n",
       "1                                                           Dine-out   \n",
       "2                                                           Dine-out   \n",
       "3                                                           Dine-out   \n",
       "4  Tandoori Chicken Kabab, Grilled Chicken, Chick...        Dine-out   \n",
       "\n",
       "  listed_in(city)                                            reviews  \\\n",
       "0     Frazer Town  Rated 3.0, RATED\\n  Good vegetarian place. But...   \n",
       "1     Frazer Town  Rated 4.0, RATED\\n  This restaurant has been a...   \n",
       "2     Frazer Town  Rated 3.0, RATED\\n  Yes it's legendary or shud...   \n",
       "3     Frazer Town  Rated 3.0, RATED\\n  My partner apparently has ...   \n",
       "4     Frazer Town  Rated 3.0, RATED\\n  The restaurant is located ...   \n",
       "\n",
       "  negative_score  neutral_score  positive_score  \n",
       "0       0.364979       0.373408        0.261613  \n",
       "1       0.001147       0.012142        0.986711  \n",
       "2       0.049107       0.157217        0.793676  \n",
       "3       0.018264       0.137870        0.843866  \n",
       "4       0.006606       0.078972        0.914422  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f0b24be5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.421656Z",
     "iopub.status.busy": "2024-11-03T04:28:46.421360Z",
     "iopub.status.idle": "2024-11-03T04:28:46.513631Z",
     "shell.execute_reply": "2024-11-03T04:28:46.512592Z"
    },
    "papermill": {
     "duration": 0.102772,
     "end_time": "2024-11-03T04:28:46.515965",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.413193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 61308 entries, 0 to 61307\n",
      "Data columns (total 21 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   index                        61308 non-null  int64  \n",
      " 1   url                          61308 non-null  object \n",
      " 2   address                      61308 non-null  object \n",
      " 3   name                         61308 non-null  object \n",
      " 4   online_order                 61308 non-null  object \n",
      " 5   book_table                   61308 non-null  object \n",
      " 6   rate                         61308 non-null  float32\n",
      " 7   votes                        61308 non-null  int64  \n",
      " 8   phone                        61308 non-null  object \n",
      " 9   location                     61308 non-null  object \n",
      " 10  rest_type                    61308 non-null  object \n",
      " 11  dish_liked                   61308 non-null  object \n",
      " 12  cuisines                     61308 non-null  object \n",
      " 13  approx_cost(for two people)  61308 non-null  int64  \n",
      " 14  menu_item                    61308 non-null  object \n",
      " 15  listed_in(type)              61308 non-null  object \n",
      " 16  listed_in(city)              61308 non-null  object \n",
      " 17  reviews                      61308 non-null  object \n",
      " 18  negative_score               61308 non-null  float32\n",
      " 19  neutral_score                61308 non-null  float32\n",
      " 20  positive_score               61308 non-null  float32\n",
      "dtypes: float32(4), int64(3), object(14)\n",
      "memory usage: 8.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4b7ae824",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.532334Z",
     "iopub.status.busy": "2024-11-03T04:28:46.532030Z",
     "iopub.status.idle": "2024-11-03T04:28:46.872453Z",
     "shell.execute_reply": "2024-11-03T04:28:46.871509Z"
    },
    "papermill": {
     "duration": 0.351452,
     "end_time": "2024-11-03T04:28:46.874991",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.523539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([  190.,  1670.,  3572.,  3129.,   737.,  8140., 16514., 16738.,\n",
       "         7983.,  2635.]),\n",
       " array([2.0999999 , 2.37999988, 2.65999985, 2.94000006, 3.22000003,\n",
       "        3.5       , 3.77999997, 4.05999994, 4.34000015, 4.61999989,\n",
       "        4.9000001 ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['rate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5730330",
   "metadata": {
    "papermill": {
     "duration": 0.010042,
     "end_time": "2024-11-03T04:28:46.896642",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.886600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5e865e4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.914350Z",
     "iopub.status.busy": "2024-11-03T04:28:46.913667Z",
     "iopub.status.idle": "2024-11-03T04:28:46.919504Z",
     "shell.execute_reply": "2024-11-03T04:28:46.918643Z"
    },
    "papermill": {
     "duration": 0.017327,
     "end_time": "2024-11-03T04:28:46.921913",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.904586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cat_feature_cols = ['name', 'online_order', 'book_table', 'location', 'rest_type', 'dish_liked', 'cuisines', 'listed_in(type)', 'menu_item', 'listed_in(city)']\n",
    "num_feature_cols = ['votes', 'approx_cost(for two people)', 'negative_score', 'neutral_score', 'positive_score']\n",
    "selected_cols = cat_feature_cols + num_feature_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9051331b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.945120Z",
     "iopub.status.busy": "2024-11-03T04:28:46.944197Z",
     "iopub.status.idle": "2024-11-03T04:28:46.961148Z",
     "shell.execute_reply": "2024-11-03T04:28:46.960263Z"
    },
    "papermill": {
     "duration": 0.029799,
     "end_time": "2024-11-03T04:28:46.963175",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.933376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.drop('rate', axis = 1)\n",
    "y = df['rate']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "15b17f60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:46.980806Z",
     "iopub.status.busy": "2024-11-03T04:28:46.980159Z",
     "iopub.status.idle": "2024-11-03T04:28:47.223097Z",
     "shell.execute_reply": "2024-11-03T04:28:47.221773Z"
    },
    "papermill": {
     "duration": 0.254616,
     "end_time": "2024-11-03T04:28:47.225860",
     "exception": false,
     "start_time": "2024-11-03T04:28:46.971244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 42)\n",
    "X_valid, X_test, y_valid, y_test = train_test_split(X_valid, y_valid, test_size=0.5, random_state=42)\n",
    "\n",
    "X_train = X_train[selected_cols]\n",
    "X_valid = X_valid[selected_cols]\n",
    "X_test = X_test[selected_cols]\n",
    "\n",
    "train_pool = Pool(X_train, y_train, cat_features = cat_feature_cols)\n",
    "valid_pool = Pool(X_valid, y_valid, cat_features = cat_feature_cols)\n",
    "test_pool = Pool(X_test, y_test, cat_features = cat_feature_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ac41dbd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:47.246205Z",
     "iopub.status.busy": "2024-11-03T04:28:47.245461Z",
     "iopub.status.idle": "2024-11-03T04:28:47.252064Z",
     "shell.execute_reply": "2024-11-03T04:28:47.251181Z"
    },
    "papermill": {
     "duration": 0.01859,
     "end_time": "2024-11-03T04:28:47.254120",
     "exception": false,
     "start_time": "2024-11-03T04:28:47.235530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_test_quality(train_pool, val_pool, test_pool, **kwargs):\n",
    "    model = CatBoostRegressor(**kwargs, random_seed=42, task_type='GPU', verbose = False, boosting_type = 'Plain')\n",
    "    model.fit(train_pool, verbose=0, eval_set=val_pool)\n",
    "    y_pred = model.predict(test_pool)\n",
    "    return eval_metric(test_pool.get_label(), y_pred, 'RMSE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "abe9d258",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:28:47.271225Z",
     "iopub.status.busy": "2024-11-03T04:28:47.270864Z",
     "iopub.status.idle": "2024-11-03T04:44:38.500261Z",
     "shell.execute_reply": "2024-11-03T04:44:38.497553Z"
    },
    "papermill": {
     "duration": 951.251808,
     "end_time": "2024-11-03T04:44:38.513738",
     "exception": false,
     "start_time": "2024-11-03T04:28:47.261930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2024-11-03 04:28:47,276] A new study created in memory with name: no-name-a3d494ef-d08e-4da7-8c53-570f8f3b070c\n",
      "[I 2024-11-03 04:30:26,536] Trial 0 finished with value: 0.02714025668692525 and parameters: {'learning_rate': 0.04370861069626263, 'depth': 10, 'iterations': 1866, 'l2_leaf_reg': 3.3946339367881464}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:30:44,896] Trial 1 finished with value: 0.1331019440032891 and parameters: {'learning_rate': 0.02404167763981929, 'depth': 4, 'iterations': 1529, 'l2_leaf_reg': 4.46470458309974}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:31:23,712] Trial 2 finished with value: 0.03362904492527368 and parameters: {'learning_rate': 0.0641003510568888, 'depth': 8, 'iterations': 1510, 'l2_leaf_reg': 4.879639408647977}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:31:43,315] Trial 3 finished with value: 0.07218165575483587 and parameters: {'learning_rate': 0.08491983767203796, 'depth': 4, 'iterations': 1591, 'l2_leaf_reg': 1.7336180394137353}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:32:20,693] Trial 4 finished with value: 0.044957053624757104 and parameters: {'learning_rate': 0.0373818018663584, 'depth': 7, 'iterations': 1716, 'l2_leaf_reg': 2.1649165607921677}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:32:40,871] Trial 5 finished with value: 0.08276998438774641 and parameters: {'learning_rate': 0.06506676052501416, 'depth': 4, 'iterations': 1646, 'l2_leaf_reg': 2.465447373174767}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:33:31,611] Trial 6 finished with value: 0.028711792863856677 and parameters: {'learning_rate': 0.05104629857953324, 'depth': 9, 'iterations': 1600, 'l2_leaf_reg': 3.0569377536544464}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:33:47,544] Trial 7 finished with value: 0.11798172632921573 and parameters: {'learning_rate': 0.06331731119758383, 'depth': 3, 'iterations': 1804, 'l2_leaf_reg': 1.6820964947491661}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:35:05,616] Trial 8 finished with value: 0.038058297062441265 and parameters: {'learning_rate': 0.015854643368675158, 'depth': 10, 'iterations': 1983, 'l2_leaf_reg': 4.233589392465845}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:35:21,951] Trial 9 finished with value: 0.14239054618802238 and parameters: {'learning_rate': 0.037415239225603365, 'depth': 3, 'iterations': 1842, 'l2_leaf_reg': 2.760609974958405}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:35:58,050] Trial 10 finished with value: 0.03626526245812411 and parameters: {'learning_rate': 0.09506228898073482, 'depth': 6, 'iterations': 1930, 'l2_leaf_reg': 3.5591927725069388}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:37:06,131] Trial 11 finished with value: 0.027491006377558212 and parameters: {'learning_rate': 0.045034741739183974, 'depth': 10, 'iterations': 1711, 'l2_leaf_reg': 3.444337066020372}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:38:15,902] Trial 12 finished with value: 0.0276033981839989 and parameters: {'learning_rate': 0.04380007364196995, 'depth': 10, 'iterations': 1745, 'l2_leaf_reg': 3.589124397546324}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:39:14,076] Trial 13 finished with value: 0.033786708941751745 and parameters: {'learning_rate': 0.02802835404542076, 'depth': 9, 'iterations': 1870, 'l2_leaf_reg': 3.5015589075599554}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:39:58,024] Trial 14 finished with value: 0.03005765734903328 and parameters: {'learning_rate': 0.07706739290906679, 'depth': 8, 'iterations': 1686, 'l2_leaf_reg': 3.9196283454440075}. Best is trial 0 with value: 0.02714025668692525.\n",
      "[I 2024-11-03 04:41:10,525] Trial 15 finished with value: 0.026583086525415963 and parameters: {'learning_rate': 0.051343099439664905, 'depth': 10, 'iterations': 1805, 'l2_leaf_reg': 2.9841652486788566}. Best is trial 15 with value: 0.026583086525415963.\n",
      "[I 2024-11-03 04:41:43,395] Trial 16 finished with value: 0.046033958015980696 and parameters: {'learning_rate': 0.056294434268808376, 'depth': 6, 'iterations': 1797, 'l2_leaf_reg': 2.993072627126801}. Best is trial 15 with value: 0.026583086525415963.\n",
      "[I 2024-11-03 04:42:43,983] Trial 17 finished with value: 0.025002274395511382 and parameters: {'learning_rate': 0.07582403042045835, 'depth': 9, 'iterations': 1905, 'l2_leaf_reg': 1.1155368792974225}. Best is trial 17 with value: 0.025002274395511382.\n",
      "[I 2024-11-03 04:43:34,551] Trial 18 finished with value: 0.026908193699729566 and parameters: {'learning_rate': 0.08001004601647603, 'depth': 8, 'iterations': 1931, 'l2_leaf_reg': 1.1369732249391395}. Best is trial 17 with value: 0.025002274395511382.\n",
      "[I 2024-11-03 04:44:38,494] Trial 19 finished with value: 0.02492621826319082 and parameters: {'learning_rate': 0.09677002756374739, 'depth': 9, 'iterations': 1996, 'l2_leaf_reg': 1.0124117450191312}. Best is trial 19 with value: 0.02492621826319082.\n"
     ]
    }
   ],
   "source": [
    "def objective(trial):\n",
    "    params = {\n",
    "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1),\n",
    "        'depth': trial.suggest_int('depth', 3, 10),\n",
    "        'iterations':trial.suggest_int('iterations', 1500, 2000),\n",
    "        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 1, 5),\n",
    "    }\n",
    "\n",
    "    model = CatBoostRegressor(**params, random_seed=42, task_type='GPU', verbose = False, boosting_type = 'Plain')\n",
    "    model.fit(train_pool, verbose=0, eval_set = valid_pool)\n",
    "    y_pred = model.predict(valid_pool)\n",
    "    \n",
    "    return eval_metric(valid_pool.get_label(), y_pred, 'RMSE')\n",
    "\n",
    "sampler = TPESampler(seed = 42)\n",
    "study = optuna.create_study(direction=\"minimize\", sampler=sampler)\n",
    "study.optimize(objective, n_trials=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "16f4c142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:44:38.537791Z",
     "iopub.status.busy": "2024-11-03T04:44:38.536961Z",
     "iopub.status.idle": "2024-11-03T04:44:38.543959Z",
     "shell.execute_reply": "2024-11-03T04:44:38.542983Z"
    },
    "papermill": {
     "duration": 0.019552,
     "end_time": "2024-11-03T04:44:38.545779",
     "exception": false,
     "start_time": "2024-11-03T04:44:38.526227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learning_rate': 0.09677002756374739,\n",
       " 'depth': 9,\n",
       " 'iterations': 1996,\n",
       " 'l2_leaf_reg': 1.0124117450191312}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "study.best_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7892cd87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:44:38.566613Z",
     "iopub.status.busy": "2024-11-03T04:44:38.566015Z",
     "iopub.status.idle": "2024-11-03T04:45:42.343888Z",
     "shell.execute_reply": "2024-11-03T04:45:42.342905Z"
    },
    "papermill": {
     "duration": 63.803853,
     "end_time": "2024-11-03T04:45:42.359267",
     "exception": false,
     "start_time": "2024-11-03T04:44:38.555414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.026839975015500606]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calc_test_quality(train_pool, valid_pool, test_pool, **study.best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e5d828d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:45:42.386988Z",
     "iopub.status.busy": "2024-11-03T04:45:42.386617Z",
     "iopub.status.idle": "2024-11-03T04:45:42.391224Z",
     "shell.execute_reply": "2024-11-03T04:45:42.390349Z"
    },
    "papermill": {
     "duration": 0.020653,
     "end_time": "2024-11-03T04:45:42.393141",
     "exception": false,
     "start_time": "2024-11-03T04:45:42.372488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_params = study.best_params"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbbe3ad4",
   "metadata": {
    "papermill": {
     "duration": 0.009495,
     "end_time": "2024-11-03T04:45:42.412341",
     "exception": false,
     "start_time": "2024-11-03T04:45:42.402846",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## CV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "45af5426",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:45:42.432831Z",
     "iopub.status.busy": "2024-11-03T04:45:42.432489Z",
     "iopub.status.idle": "2024-11-03T04:45:42.438057Z",
     "shell.execute_reply": "2024-11-03T04:45:42.437235Z"
    },
    "papermill": {
     "duration": 0.018124,
     "end_time": "2024-11-03T04:45:42.439982",
     "exception": false,
     "start_time": "2024-11-03T04:45:42.421858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # add test pool anytime, same procedure with train and val\n",
    "# folds = 5\n",
    "\n",
    "# kf = KFold(n_splits = folds, shuffle = True, random_state = 42)\n",
    "\n",
    "# best_val_loss = 10\n",
    "\n",
    "# for fold, (trn_idx, val_idx) in enumerate(kf.split(df)):\n",
    "#     # selection\n",
    "#     trn_ft = df.loc[trn_idx, selected_cols]\n",
    "#     trn_lbl = df.loc[trn_idx, 'rate']\n",
    "#     val_ft = df.loc[val_idx, selected_cols]\n",
    "#     val_lbl = df.loc[val_idx, 'rate']\n",
    "\n",
    "#     # create pool\n",
    "#     train_pool = Pool(trn_ft, trn_lbl, cat_features = cat_feature_cols)\n",
    "#     valid_pool = Pool(val_ft, val_lbl, cat_features = cat_feature_cols)\n",
    "\n",
    "#     # model\n",
    "#     model = CatBoostRegressor(\n",
    "#         **best_params,\n",
    "#         random_seed = 42, \n",
    "#         task_type = 'GPU', \n",
    "#         verbose = False,\n",
    "#         boosting_type = 'Plain'\n",
    "#     )\n",
    "\n",
    "#     model.fit(train_pool, eval_set = valid_pool)\n",
    "\n",
    "#     # compute loss\n",
    "#     pred_valid = model.predict(valid_pool)\n",
    "#     rmse = eval_metric(valid_pool.get_label(), pred_valid, 'RMSE')\n",
    "\n",
    "#     if rmse < best_val_loss:\n",
    "#         model.save_model(\"restaurant_model_v5.cbm\")\n",
    "    \n",
    "    \n",
    "#     print(f\"Fold {fold + 1}, RMSE: {rmse}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6766464",
   "metadata": {
    "papermill": {
     "duration": 0.009631,
     "end_time": "2024-11-03T04:45:42.459133",
     "exception": false,
     "start_time": "2024-11-03T04:45:42.449502",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Inference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c0622b81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:45:42.480295Z",
     "iopub.status.busy": "2024-11-03T04:45:42.479612Z",
     "iopub.status.idle": "2024-11-03T04:46:44.408194Z",
     "shell.execute_reply": "2024-11-03T04:46:44.407268Z"
    },
    "papermill": {
     "duration": 61.941765,
     "end_time": "2024-11-03T04:46:44.410650",
     "exception": false,
     "start_time": "2024-11-03T04:45:42.468885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[selected_cols]\n",
    "y = df['rate']\n",
    "\n",
    "full_train_pool = Pool(X, y, cat_features = cat_feature_cols)\n",
    "\n",
    "final_model = CatBoostRegressor(\n",
    "        **best_params,\n",
    "        random_seed = 42, \n",
    "        task_type = 'GPU', \n",
    "        verbose = False,\n",
    "        boosting_type = 'Plain'\n",
    "    )\n",
    "\n",
    "final_model.fit(full_train_pool)\n",
    "\n",
    "final_model.save_model(\"restaurant_model_v9.cbm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a500b472",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-03T04:46:44.432248Z",
     "iopub.status.busy": "2024-11-03T04:46:44.431899Z",
     "iopub.status.idle": "2024-11-03T04:46:44.436747Z",
     "shell.execute_reply": "2024-11-03T04:46:44.435980Z"
    },
    "papermill": {
     "duration": 0.017687,
     "end_time": "2024-11-03T04:46:44.438674",
     "exception": false,
     "start_time": "2024-11-03T04:46:44.420987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# make prediction using final model here \n",
    "\n",
    "# final_model.predict(test) # or sth"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "sourceId": 204729139,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1107.150728,
   "end_time": "2024-11-03T04:46:45.067800",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-03T04:28:17.917072",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
